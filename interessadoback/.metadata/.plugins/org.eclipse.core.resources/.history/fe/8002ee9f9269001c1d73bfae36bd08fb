package com.iasd.lourenco.interessados.repository.discipulado;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.util.ObjectUtils;

import com.iasd.lourenco.interessados.model.Discipulo;
import com.iasd.lourenco.interessados.model.Discipulo_;
import com.iasd.lourenco.interessados.repository.filter.DiscipuloFilter;

public class DiscipuloRepositoryImpl implements DiscipuloRepositoryQuery {

	@PersistenceContext
	private EntityManager manager;

	@Override
	public List<Discipulo> filtrar(DiscipuloFilter discipuloFilter) {
		CriteriaBuilder builder = manager.getCriteriaBuilder();
		CriteriaQuery<Discipulo> criteria = builder.createQuery(Discipulo.class);
		Root<Discipulo> root = criteria.from(Discipulo.class);

		Predicate[] predicates = criarRestricoes(discipuloFilter, builder, root);
		criteria.where(predicates);

		TypedQuery<Discipulo> query = manager.createQuery(criteria);
		return query.getResultList();
	}

	private Predicate[] criarRestricoes(DiscipuloFilter discipuloFilter, CriteriaBuilder builder,
			Root<Discipulo> root) {
		List<Predicate> predicates = new ArrayList<>();

		if(!ObjectUtils.isEmpty(discipuloFilter.getNome())) {
			predicates.add(builder.like(
					builder.lower(root.get(
							Discipulo_.nome
							)), "%" + discipuloFilter.getNome().toLowerCase() + "%"));
		}
		
		if(!ObjectUtils.isEmpty(discipuloFilter.getTelefone())) {
			predicates.add(builder.like(
					builder.lower(root.get(
							Discipulo_.telefone
							)), "%" + discipuloFilter.getTelefone().toLowerCase() + "%"));
		}
		
	
		return predicates.toArray(new Predicate[predicates.size()]);
	}

}
